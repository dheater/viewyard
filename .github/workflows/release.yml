name: Release

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check if we need a release and determine version bump
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version.outputs.should-release }}
      new-version: ${{ steps.version.outputs.new-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version bump
        id: version
        run: |
          # Get current version from Cargo.toml
          current_version=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $current_version"

          # Get commits since last tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$last_tag" ]; then
            commits=$(git log --oneline)
          else
            commits=$(git log ${last_tag}..HEAD --oneline)
          fi

          # Check for breaking changes, features, or fixes
          if echo "$commits" | grep -q "BREAKING CHANGE\|!:"; then
            bump="major"
          elif echo "$commits" | grep -q "^[a-f0-9]* feat"; then
            bump="minor"
          elif echo "$commits" | grep -q "^[a-f0-9]* fix"; then
            bump="patch"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Calculate new version
          IFS='.' read -r major minor patch <<< "$current_version"
          case $bump in
            major) new_version="$((major + 1)).0.0" ;;
            minor) new_version="$major.$((minor + 1)).0" ;;
            patch) new_version="$major.$minor.$((patch + 1))" ;;
          esac

          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "new-version=$new_version" >> $GITHUB_OUTPUT
          echo "New version will be: $new_version"

  # Update version and create release
  release:
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-cliff
        run: |
          wget https://github.com/orhun/git-cliff/releases/download/v1.4.0/git-cliff-1.4.0-x86_64-unknown-linux-gnu.tar.gz
          tar -xzf git-cliff-1.4.0-x86_64-unknown-linux-gnu.tar.gz
          sudo mv git-cliff-1.4.0/git-cliff /usr/local/bin/

      - name: Update Cargo.toml version
        run: |
          sed -i 's/^version = ".*"/version = "${{ needs.check-release.outputs.new-version }}"/' Cargo.toml

      - name: Generate changelog
        run: |
          git-cliff --tag v${{ needs.check-release.outputs.new-version }} > CHANGELOG.md

      - name: Commit version bump and changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml CHANGELOG.md
          git commit -m "chore(release): prepare for v${{ needs.check-release.outputs.new-version }}"
          git tag v${{ needs.check-release.outputs.new-version }}
          git push origin main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-release.outputs.new-version }}
          release_name: Release v${{ needs.check-release.outputs.new-version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  # Build and release binaries
  build:
    needs: [check-release, release]
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.check-release.outputs.new-version }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/viewyard dist/
          cd dist && tar -czf viewyard-v${{ needs.check-release.outputs.new-version }}-${{ matrix.target }}.tar.gz viewyard

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: dist/viewyard-v${{ needs.check-release.outputs.new-version }}-${{ matrix.target }}.tar.gz
          asset_name: viewyard-v${{ needs.check-release.outputs.new-version }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
