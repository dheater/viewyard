name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test job - runs on all pushes and PRs
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check formatting
      run: cargo fmt --check
    
    - name: Clippy
      run: cargo clippy -- -D warnings
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run unit tests
      run: cargo test --lib --verbose
    
    - name: Run unit test files
      run: cargo test --test unit_tests --verbose
    
    - name: Run git tests
      run: cargo test --test git_tests --verbose
    
    - name: Run integration tests (CLI interface)
      run: cargo test --test integration_tests --verbose
    
    - name: Run real workflow tests (may have expected failures)
      run: cargo test --test real_workflow_tests --verbose || echo "Some real workflow tests may fail in CI environment"

  # Release job - only runs on main branch pushes after tests pass
  release:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version.outputs.should-release }}
      new-version: ${{ steps.version.outputs.new-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version bump
        id: version
        run: |
          # Get the latest version tag by version number (not git ancestry)
          last_tag=$(git tag --list 'v*' --sort=-version:refname | head -1)
          if [ -z "$last_tag" ]; then
            echo "No previous tags found, starting from v0.1.0"
            current_version="0.1.0"
            commits=$(git log --oneline --pretty=format:"%s")
          else
            # Remove 'v' prefix from tag to get version
            current_version=${last_tag#v}
            echo "Latest version tag: $last_tag (version: $current_version)"

            # Get commits since the latest tag
            # Note: This may include commits from parallel branches if tags were created elsewhere
            commits=$(git log ${last_tag}..HEAD --oneline --pretty=format:"%s" 2>/dev/null || git log --oneline --pretty=format:"%s")
          fi

          # Skip if no new commits
          if [ -z "$commits" ]; then
            echo "No new commits since last tag"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Commits to analyze:"
          echo "$commits"

          # Check for breaking changes, features, or fixes using conventional commits
          if echo "$commits" | grep -qE "(BREAKING CHANGE|!:|^[^:]*!:)"; then
            bump="major"
          elif echo "$commits" | grep -qE "^feat(\([^)]*\))?:"; then
            bump="minor"
          elif echo "$commits" | grep -qE "^fix(\([^)]*\))?:"; then
            bump="patch"
          else
            echo "No conventional commits found that warrant a release"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Calculate new version
          IFS='.' read -r major minor patch <<< "$current_version"
          case $bump in
            major) new_version="$((major + 1)).0.0" ;;
            minor) new_version="$major.$((minor + 1)).0" ;;
            patch) new_version="$major.$minor.$((patch + 1))" ;;
          esac

          # Check if tag already exists
          if git tag --list | grep -q "^v${new_version}$"; then
            echo "Tag v${new_version} already exists, skipping release"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "new-version=$new_version" >> $GITHUB_OUTPUT
          echo "Bump type: $bump"
          echo "New version will be: $new_version"

      - name: Install git-cliff
        if: steps.version.outputs.should-release == 'true'
        run: |
          wget https://github.com/orhun/git-cliff/releases/download/v1.4.0/git-cliff-1.4.0-x86_64-unknown-linux-gnu.tar.gz
          tar -xzf git-cliff-1.4.0-x86_64-unknown-linux-gnu.tar.gz
          sudo mv git-cliff-1.4.0/git-cliff /usr/local/bin/

      - name: Update Cargo.toml version
        if: steps.version.outputs.should-release == 'true'
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.new-version }}"/' Cargo.toml

      - name: Generate changelog
        if: steps.version.outputs.should-release == 'true'
        run: |
          git-cliff --tag v${{ steps.version.outputs.new-version }} > CHANGELOG.md

      - name: Commit version bump and changelog
        if: steps.version.outputs.should-release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml CHANGELOG.md
          git commit -m "chore(release): prepare for v${{ steps.version.outputs.new-version }}"
          git tag v${{ steps.version.outputs.new-version }}
          git push origin main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.version.outputs.should-release == 'true'
        run: |
          gh release create v${{ steps.version.outputs.new-version }} \
            --title "Release v${{ steps.version.outputs.new-version }}" \
            --notes-file CHANGELOG.md \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build binaries - only runs if we're doing a release
  build:
    needs: [test, release]
    if: needs.release.outputs.should-release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.release.outputs.new-version }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/viewyard dist/
          cd dist && tar -czf viewyard-v${{ needs.release.outputs.new-version }}-${{ matrix.target }}.tar.gz viewyard

      - name: Upload release asset
        run: |
          gh release upload v${{ needs.release.outputs.new-version }} \
            dist/viewyard-v${{ needs.release.outputs.new-version }}-${{ matrix.target }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
